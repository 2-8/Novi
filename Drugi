#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include <stdio.h>
#include <iostream>
#include <cstdlib>
#include <stdlib.h>
#include <cctype>
using namespace std;

typedef struct lista
{
	int broj;
	struct lista *next;
};

typedef struct lista2
{
	int broj, pojava;
	struct lista2 *next;
};

typedef lista *li;
typedef lista2 *li2;
 
void Formiraj(li *glava)
{
	li novi;
	int x;
	cout << "Unos podataka:" << endl;
	while (scanf("%d", &x) == 1)
	{
		novi = (lista*)malloc(sizeof(lista));
		novi->broj = x;
		novi->next = *glava;
		*glava = novi;
	}
}
void Ispis(li glava)
{
	lista *novi;
	for (novi = glava; novi != NULL; novi = novi->next)
	{
		cout << "\nBroj " << novi->broj << "\n";
	}
}

void Ispis2(li2 glava)
{
	lista2 *novi;
	for (novi = glava; novi != NULL; novi = novi->next)
	{
		cout << "\nBroj " << novi->broj << endl;
		cout << "Broj pojava " << novi->pojava << endl;
	}
}
int brElem(li glava)
{
	int b = 0;
	lista *pom;
	for (pom = glava; pom != NULL; pom = pom->next)
		b++;
	return b;
 }
int Suma(li glava)
{
	int s = 0;
	lista *pom;
	for (pom = glava; pom != NULL; pom = pom->next)
		s += pom->broj;
	return s;
}
void Nadovezivanje(li *glava1, li *glava2)
{
	li tek, pret = NULL, novi = NULL;
	for (tek = novi = *glava1; tek != NULL; tek = tek->next)
		pret = tek;
	pret->next = *glava2;
	*glava1 = novi;
}

int Prebrojavanje(li glava, int b)
{
	int p = 0;
	while (glava)
	{
		if (glava->broj == b)
			p++;
		glava = glava->next;
	}
	return p;
}
void IzbaciPonavljanje(li2 *glava)
{
	li2 tek, pret, novi;
	pret = *glava;
	tek = *glava;
	while (tek != NULL)
	{
		while (pret->next != NULL)
		{
			if (tek->broj == pret->broj)
			{
				novi = pret->next;
				pret->next = pret;
				free(novi);
			}
			else
				pret = pret->next;
		}
		tek = tek->next;
		pret = tek;
	}
}

void main()
{
	lista *glava1 = NULL, *nova;
	lista2 *glava2 = NULL, *pom;
	Formiraj(&glava1);
	Ispis(glava1);
	nova = glava1;
	while (nova)
	{
		pom = new lista2;
		pom->broj = nova->broj;
		pom->pojava = Prebrojavanje(glava1, nova->broj);
		pom->next = glava2;
		glava2 = pom;
		nova = nova->next;
	}
	Ispis2(glava2);
	system("Pause");
}
